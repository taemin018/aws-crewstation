<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.crewstation.mapper.payment.status.PaymentStatusMapper">
    <sql id="searchWhere">
        <where>
            <if test="search != null and search.categories != null and search.categories.size() > 0">
                AND UPPER(ps.payment_phase::text) IN
                <foreach collection="search.categories" item="cat" open="(" separator="," close=")">
                    UPPER(#{cat})
                </foreach>
            </if>

            <if test="search != null and search.keyword != null and search.keyword != ''">
                <bind name="kw" value="'%' + search.keyword + '%'" />
                AND ( b.member_name ILIKE #{kw} OR vpp.post_title ILIKE #{kw} )
            </if>
        </where>
    </sql>



    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_payment_status (purchase_id,member_id)
        values (#{purchaseId},#{memberId});
    </insert>

    <select id="selectByPurchaseId">
        select id,
               purchase_id,
               member_id,
               payment_phase,
               created_datetime,
               updated_datetime
        from tbl_payment_status
        where purchase_id = #{purchaseId}
    </select>

    <!-- 결제 상태 단건 조회 -->
    <select id="findByPaymentStatusId">
        SELECT
            id,
            payment_phase,
            purchase_id,
            member_id,
            created_datetime,
            updated_datetime
        FROM tbl_payment_status
        WHERE id = #{paymentStatusId}
    </select>

    <!-- 결제 상태 업데이트-->
    <update id="updatePaymentStatus">
        UPDATE tbl_payment_status
        SET payment_phase = #{paymentPhase},
            updated_datetime = now()
        WHERE id = #{paymentStatusId}
    </update>

    <select id="countPayment">
        select count( ps.id)
        from tbl_payment_status ps
        left join tbl_payment p on p.payment_status_id = ps.id
        left join view_post_purchase vpp on vpp.id = ps.purchase_id
        left join tbl_member b on b.id = ps.member_id
        left join tbl_member s on s.id = vpp.member_id
        <include refid="searchWhere"/>

    </select>

    <select id="selectPayment">
        select
        ps.id                               as id,
        ps.payment_phase                    as paymentPhase,
        ps.purchase_id                      as purchaseId,
        ps.member_id                        as memberId,

        to_char(p.created_datetime, 'YYYY-MM-DD HH24:MI:SS') as paidAt,
        to_char(p.updated_datetime, 'YYYY-MM-DD HH24:MI:SS') as updatedDatetime,

        vpp.post_title                      as productName,  <!-- ✅ 하나만 남김 -->
        coalesce(vpp.purchase_product_price, 0) * coalesce(vpp.purchase_product_count, 0) as amount,

        b.member_name                       as buyerName,
        b.member_phone                      as buyerPhone,
        b.member_email                      as buyerEmail,

        s.member_name                       as sellerName,
        s.member_phone                      as sellerPhone,
        s.member_email                      as sellerEmail,

        vpp.purchase_delivery_method        as deliveryType

        from tbl_payment_status ps
        left join tbl_payment p
        on p.payment_status_id = ps.id
        left join view_post_purchase vpp
        on vpp.id = ps.purchase_id
        left join tbl_member b
        on b.id = ps.member_id
        left join tbl_member s
        on s.id = vpp.member_id
        <include refid="searchWhere"/>

        order by p.created_datetime desc
        limit #{criteria.rowCount} offset #{criteria.offset}
    </select>



    <select id="selectPaymentDetail">
        select
            ps.id                               as id,
            ps.payment_phase                    as paymentPhase,
            ps.purchase_id                      as purchaseId,
            ps.member_id                        as memberId,

            to_char(p.created_datetime, 'YYYY-MM-DD HH24:MI:SS') as paidAt,
            to_char(p.updated_datetime, 'YYYY-MM-DD HH24:MI:SS') as updatedDatetime,
            to_char(vpp.created_datetime, 'YYYY-MM-DD HH24:MI:SS') AS listedAt,

            concat_ws(' ', ta.address, ta.address_detail)          as address,
            coalesce(vpp.purchase_product_price, 0) * coalesce(vpp.purchase_product_count, 0) as amount,

            b.member_name                   as buyerName,
            b.member_phone                  as buyerPhone,
            b.member_email                  as buyerEmail,

            s.member_name                   as sellerName,
            s.member_phone                  as sellerPhone,
            s.member_email                  as sellerEmail,

            vpp.purchase_delivery_method    as deliveryType,
            vpp.post_title                  as productName

        from tbl_payment_status ps
                 left join tbl_payment p
                           on p.payment_status_id = ps.id
                 left join view_post_purchase vpp
                           on vpp.id = ps.purchase_id
                 left join tbl_member b
                           on b.id = ps.member_id
                 left join tbl_member s
                           on s.id = vpp.member_id
                 left join lateral (
            select
                address,
                address_detail
            from tbl_address
            where member_id = b.id
            order by updated_datetime desc
            limit 1
            ) ta on true

        where ps.id = #{id}
        order by ps.id, p.updated_datetime desc nulls last, p.created_datetime desc nulls last
        limit 1
    </select>



    <select id="selectPaymentSummary">
        select
        coalesce(sum(case when upper(ps.payment_phase::text) = 'SUCCESS'
        then coalesce(vpp.purchase_product_price, 0) * coalesce(vpp.purchase_product_count, 0) else 0 end), 0) as "approvedAmount",

        coalesce(sum(case when upper(ps.payment_phase::text) in ('REFUND', 'CANCEL')
        then coalesce(vpp.purchase_product_price, 0) * coalesce(vpp.purchase_product_count, 0) else 0 end), 0) as "canceledAmount"

        from tbl_payment_status ps

        left join tbl_payment p on p.payment_status_id = ps.id
        left join view_post_purchase vpp on vpp.id = ps.purchase_id
        left join tbl_member b on b.id = ps.member_id
        left join tbl_member s on s.id = vpp.member_id
        <include refid="searchWhere"/>
    </select>










</mapper>